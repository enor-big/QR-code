import json
import time
import requests
import base64
from io import BytesIO
from PIL import Image, ImageDraw, ImageFilter
import qrcode


class Text2ImageAPI:
    def __init__(self, url, api_key, secret_key):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API."""
        self.URL = url
        self.API_KEY = api_key
        self.SECRET_KEY = secret_key
        self.AUTH_HEADERS = {
            'X-Key': f'Key {self.API_KEY}',
            'X-Secret': f'Secret {self.SECRET_KEY}',
        }

    def get_model(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        try:
            print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            response = requests.get(self.URL + 'key/api/v1/models', headers=self.AUTH_HEADERS)
            response.encoding = 'utf-8'

            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ API ({response.status_code}): {response.text}")
                return None

            data = response.json()
            return data[0]['id'] if data else None

        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
            return None

    def generate(self, prompt, model, images=1, width=1024, height=1024):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": prompt
            }
        }

        data = {
            'model_id': (None, model),
            'params': (None, json.dumps(params, ensure_ascii=False), 'application/json'),
        }

        try:
            print(f"üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")
            response = requests.post(self.URL + 'key/api/v1/text2image/run', headers=self.AUTH_HEADERS, files=data)
            response.encoding = 'utf-8'
            data = response.json()

            print(f"üîç –û—Ç–≤–µ—Ç API ({response.status_code}): {data}")

            if response.status_code == 201 and "uuid" in data:
                return data['uuid']  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º UUID

            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code} - {data}")
            return None

        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
            return None

    def check_generation(self, request_id, attempts=20, delay=10):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        while attempts > 0:
            try:
                response = requests.get(self.URL + f'key/api/v1/text2image/status/{request_id}',
                                        headers=self.AUTH_HEADERS)
                response.encoding = 'utf-8'
                data = response.json()

                if data.get('status') == 'DONE':
                    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
                    return data.get('images', [])

                print(f"‚åõ –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data.get('status')} (–æ–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫.)")
                attempts -= 1
                time.sleep(delay)

            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                return []

        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return []

    @staticmethod
    def decode_image(base64_string):
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ base64."""
        try:
            image_data = base64.b64decode(base64_string)
            return Image.open(BytesIO(image_data))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None


def generate_qr_code(data, size=300):
    """–°–æ–∑–¥–∞—ë—Ç QR-–∫–æ–¥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –º—è–≥–∫–∏–º–∏ –∫—Ä–∞—è–º–∏."""
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_H,
        box_size=10,
        border=1,  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤–æ–∫—Ä—É–≥ QR-–∫–æ–¥–∞
    )
    qr.add_data(data)
    qr.make(fit=True)
    qr_img = qr.make_image(fill="black", back_color="white").convert("RGBA")

    # –û–±—Ä–µ–∑–∞–µ–º –±–µ–ª—ã–µ –∫—Ä–∞—è
    bbox = qr_img.getbbox()
    qr_img = qr_img.crop(bbox)

    # –î–µ–ª–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å)
    qr_img = qr_img.resize((size, size), Image.LANCZOS)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∫—Ä–∞—è
    mask = Image.new("L", (size, size), 0)
    draw = ImageDraw.Draw(mask)
    draw.rounded_rectangle((0, 0, size, size), radius=30, fill=255)  # –†–∞–¥–∏—É—Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è
    qr_img.putalpha(mask)

    # –î–µ–ª–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º (–Ω–∞ 90%)
    qr_img = qr_img.convert("RGBA")
    alpha = qr_img.split()[3]
    alpha = alpha.point(lambda p: p * 0.9)  # 90% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    qr_img.putalpha(alpha)

    return qr_img


def overlay_qr_on_image(background, qr_code):
    """–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç QR-–∫–æ–¥ –ø–æ —Ü–µ–Ω—Ç—Ä—É —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    bg_width, bg_height = background.size
    qr_width, qr_height = qr_code.size

    position = ((bg_width - qr_width) // 2, (bg_height - qr_height) // 2)

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ª–æ–π, —á—Ç–æ–±—ã –º—è–≥–∫–æ –Ω–∞–ª–æ–∂–∏—Ç—å QR-–∫–æ–¥
    overlay = Image.new("RGBA", background.size, (0, 0, 0, 0))
    overlay.paste(qr_code, position, qr_code)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º QR-–∫–æ–¥–æ–º
    return Image.alpha_composite(background.convert("RGBA"), overlay)


if __name__ == '__main__':
    # üîπ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ API-–∫–ª—é—á–∏
    API_URL = 'https://api-key.fusionbrain.ai/'
    API_KEY = '6AAC667DF487820133143F17037CBB54'
    SECRET_KEY = '7E55DE7139607DED7C9CB8FF604A3D25'

    # üîπ –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç API
    api = Text2ImageAPI(API_URL, API_KEY, SECRET_KEY)

    # üîπ –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥–µ–ª–∏
    model_id = api.get_model()

    if model_id is None:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á–∏!")
        exit()

    # üîπ –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    qr_link = input("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è QR-–∫–æ–¥–∞: ").strip()

    if not qr_link:
        print("‚ùå –û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
        exit()

    # üîπ –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–º—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prompt = input("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–æ–º—Ç): ").strip()

    if not prompt:
        print("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–º—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        exit()

    # üîπ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    uuid = api.generate(prompt, model_id)

    if uuid is None:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
        exit()

    # üîπ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    images = api.check_generation(uuid)

    if not images:
        print("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        exit()

    # üîπ –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    base64_image = images[0]
    background_img = api.decode_image(base64_image)

    if background_img is None:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        exit()

    # üîπ –°–æ–∑–¥–∞—ë–º QR-–∫–æ–¥ —Å –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
    qr_code_img = generate_qr_code(qr_link, size=300)

    # üîπ –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º QR-–∫–æ–¥ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    final_img = overlay_qr_on_image(background_img, qr_code_img)

    # üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    final_img.show()
    final_img.save("final_result.png")
    print("‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ final_result.png")
