import json
import time
import requests
import base64
from io import BytesIO
from PIL import Image
import qrcode
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram Bot Token
TOKEN = "8035098218:AAFk4b8XB_n2ghEUzUsQjl_MgWOf6APug0E"

# API Keys
API_URL = "https://api-key.fusionbrain.ai/"
API_KEY = "6AAC667DF487820133143F17037CBB54"
SECRET_KEY = "7E55DE7139607DED7C9CB8FF604A3D25"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–º—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
RANDOM_PROMPTS = [
    "–ó–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–Ω—ã–º —Ö—Ä–µ–±—Ç–æ–º",
    "–ë—É–¥—É—â–∏–π –Ω–æ—á–Ω–æ–π –≥–æ—Ä–æ–¥ —Å –ª–µ—Ç–∞—é—â–∏–º–∏ –º–∞—à–∏–Ω–∞–º–∏",
    "–ü–æ–¥–≤–æ–¥–Ω—ã–π –º–∏—Ä —Å –∫–æ—Ä–∞–ª–ª–∞–º–∏ –∏ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–º–∏ —Ä—ã–±–∞–º–∏",
    "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ª–µ—Å —Å —Å–≤–µ—Ç—è—â–∏–º–∏—Å—è –≥—Ä–∏–±–∞–º–∏",
    "–ü–æ—Ä—Ç—Ä–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫",
    "–î—Ä–∞–∫–æ–Ω –ø–∞—Ä–∏—Ç –Ω–∞–¥ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–º –∑–∞–º–∫–æ–º",
    "–¢–∏—Ö–∏–π –ø–ª—è–∂ —Å –ø–∞–ª—å–º–∞–º–∏ –∏ –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç–æ–π –≤–æ–¥–æ–π",
    "–°—Ç–∏–º–ø–∞–Ω–∫-–∏–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
    "–Ø—Ä–∫–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å —Å –≤–∏—Ö—Ä—è–º–∏ —Ü–≤–µ—Ç–æ–≤",
    "–ê–ø–æ–∫–∞–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–π –ø–µ–π–∑–∞–∂ –ø–æ—Å–ª–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã",
    "–ó–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ –Ω–∞–¥ –±–µ—Å–∫—Ä–∞–π–Ω–µ–π –ø—É—Å—Ç—ã–Ω–µ–π",
    "–ì–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ —Å –≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–ª–∞–º–∞–º–∏",
    "–°–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ –Ω–∞–¥ —Ç–∞–π–≥–æ–π",
    "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å —É –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
    "–†–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª—è —Ü–≤–µ—Ç–æ–≤ –≤ —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å",
    "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤ —Å –¥—Ä–µ–≤–Ω–∏–º–∏ —Ä—É–∏–Ω–∞–º–∏",
    "–ù–æ—á–Ω–æ–π —Ä—ã–Ω–æ–∫ –≤ –∞–∑–∏–∞—Ç—Å–∫–æ–º –≥–æ—Ä–æ–¥–µ",
    "–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –≤ –æ–±–ª–∞–∫–∞—Ö",
    "–ú–æ—Ä—Å–∫–æ–π –±–æ–π –º–µ–∂–¥—É –∫–æ—Ä–∞–±–ª—è–º–∏ —Å –¥—Ä–∞–∫–æ–Ω–∞–º–∏",
    "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç–∞–ª –≤ –¥—Ä—É–≥–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ",
    "–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–π —Ä—ã—Ü–∞—Ä—å –Ω–∞ –ø–æ–ª–µ –±–æ—è",
    "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ª–∞–Ω–¥—à–∞—Ñ—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–ª–Ω—Ü–∞–º–∏",
    "–ì–æ—Ä–æ–¥ –ø–æ–¥ –≤–æ–¥–æ–π —Å –∫–æ—Ä–∞–ª–ª–æ–≤—ã–º–∏ –¥–æ–º–∞–º–∏",
    "–í–æ–ª—à–µ–±–Ω—ã–π —Ä–∞—Å—Å–≤–µ—Ç –Ω–∞–¥ –æ–∑–µ—Ä–æ–º",
    "–ê–Ω—Ç–∏—á–Ω—ã–π —Ö—Ä–∞–º —Å—Ä–µ–¥–∏ –∑–µ–ª–µ–Ω—ã—Ö —Ö–æ–ª–º–æ–≤",
    "–õ–µ—Å–Ω—ã–µ —ç–ª—å—Ñ—ã –≤ —Å–≤–µ—Ç–µ –ª—É–Ω—ã",
    "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è –Ω–∞–¥ –≥–æ–ª—É–±–æ–π –ø–ª–∞–Ω–µ—Ç–æ–π"
]

# –ö–ª–∞—Å—Å API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
class Text2ImageAPI:
    def __init__(self):
        self.URL = API_URL
        self.API_KEY = API_KEY
        self.SECRET_KEY = SECRET_KEY
        self.AUTH_HEADERS = {
            "X-Key": f"Key {self.API_KEY}",
            "X-Secret": f"Secret {self.SECRET_KEY}",
        }

    def get_model(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –º–æ–¥–µ–ª–∏."""
        response = requests.get(self.URL + "key/api/v1/models", headers=self.AUTH_HEADERS)
        if response.status_code == 200:
            data = response.json()
            return data[0]["id"] if data else None
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {response.status_code} - {response.text}")
        return None

    def generate(self, prompt, model, style, images=1, width=1024, height=1024):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è."""
        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {"query": f"{prompt}, style: {style}"}
        }
        data = {
            "model_id": (None, model),
            "params": (None, json.dumps(params, ensure_ascii=False), "application/json")
        }
        response = requests.post(self.URL + "key/api/v1/text2image/run", headers=self.AUTH_HEADERS, files=data)
        if response.status_code == 201:
            return response.json().get("uuid")
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code} - {response.text}")
        return None

    def check_generation(self, request_id, attempts=20, delay=10):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        while attempts > 0:
            response = requests.get(self.URL + f"key/api/v1/text2image/status/{request_id}", headers=self.AUTH_HEADERS)
            data = response.json()
            if data.get("status") == "DONE":
                return data.get("images", [])
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({attempts} –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å)")
            time.sleep(delay)
            attempts -= 1
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
        return []

    @staticmethod
    def decode_image(base64_string):
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        image_data = base64.b64decode(base64_string)
        return Image.open(BytesIO(image_data))

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ –±–µ–∑ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —É–≥–ª–æ–≤
def generate_qr_code(data, size=300):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_H,
        box_size=10,
        border=1
    )
    qr.add_data(data)
    qr.make(fit=True)
    qr_img = qr.make_image(fill="black", back_color="white").convert("RGBA")
    qr_img = qr_img.resize((size, size), Image.LANCZOS)
    return qr_img

# –§—É–Ω–∫—Ü–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
def overlay_qr_on_image(background, qr_code, alpha=160):
    bg_width, bg_height = background.size
    qr_width, qr_height = qr_code.size
    qr_overlay = qr_code.copy()
    qr_overlay.putalpha(alpha)  # –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    position = ((bg_width - qr_width) // 2, (bg_height - qr_height) // 2)
    overlay = Image.new("RGBA", background.size, (0, 0, 0, 0))
    overlay.paste(qr_overlay, position, qr_overlay)
    return Image.alpha_composite(background.convert("RGBA"), overlay)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class UserHistory:
    def __init__(self):
        self.history = {}

    def save_request(self, user_id, data):
        self.history[str(user_id)] = json.dumps(data, ensure_ascii=False)

    def get_last_request(self, user_id):
        data_str = self.history.get(str(user_id))
        return json.loads(data_str) if data_str else None

user_history = UserHistory()

# FSM (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
class Form(StatesGroup):
    qr_link = State()
    prompt = State()
    style = State()
    transparency = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ QR-–∫–æ–¥–∞
def qr_type_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üìù QR-–∫–æ–¥ –∫–∞–∫ –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫", callback_data="qr_watermark")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
def style_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üé® –†–µ–∞–ª–∏–∑–º", callback_data="style_realism")],
        [InlineKeyboardButton(text="üñå –ê—Ä—Ç", callback_data="style_art")],
        [InlineKeyboardButton(text="üåå –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="style_fantasy")],
        [InlineKeyboardButton(text="üëæ –ö–∏–±–µ—Ä–ø–∞–Ω–∫", callback_data="style_cyberpunk")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–º—Ç–∞
def prompt_choice_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø—Ä–æ–º—Ç", callback_data="custom_prompt")],
        [InlineKeyboardButton(text="üé≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º—Ç", callback_data="random_prompt")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
def transparency_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (160)", callback_data="transparency_160")],
        [InlineKeyboardButton(text="‚¨õ –ë–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ (255)", callback_data="transparency_255")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
def continue_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="continue_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="continue_no")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    await state.set_state(Form.qr_link)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è QR-–∫–æ–¥–∞.")

# –ü—Ä–∏—ë–º —Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ QR-–∫–æ–¥–∞
@router.message(Form.qr_link)
async def get_qr_link(message: Message, state: FSMContext):
    if not message.text.startswith("http"):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    await state.update_data(qr_link=message.text.strip())
    await state.set_state(Form.prompt)
    await message.answer("‚úÖ –¢–∏–ø QR-–∫–æ–¥–∞ –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º—Ç–∞:", reply_markup=prompt_choice_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–º—Ç–∞
@router.callback_query(lambda c: c.data in ["custom_prompt", "random_prompt"])
async def handle_prompt_choice(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "custom_prompt":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º—Ç:")
    elif callback.data == "random_prompt":
        random_prompt = random.choice(RANDOM_PROMPTS)
        await state.update_data(prompt=random_prompt)
        await callback.message.answer(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º—Ç: {random_prompt}")
        await state.set_state(Form.style)
        await callback.message.answer("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=style_keyboard())
    await callback.answer()

# –ü—Ä–∏—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º—Ç–∞
@router.message(Form.prompt)
async def get_custom_prompt(message: Message, state: FSMContext):
    await state.update_data(prompt=message.text.strip())
    await state.set_state(Form.style)
    await message.answer("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=style_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
@router.callback_query(lambda c: c.data.startswith("style_"))
async def select_style(callback: types.CallbackQuery, state: FSMContext):
    style_mapping = {
        "style_realism": "Realism",
        "style_art": "Artistic",
        "style_fantasy": "Fantasy",
        "style_cyberpunk": "Cyberpunk"
    }
    selected_style = style_mapping.get(callback.data, "Realism")
    await state.update_data(style=selected_style)
    await state.set_state(Form.transparency)
    await callback.message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {selected_style}\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ QR-–∫–æ–¥–∞:", reply_markup=transparency_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
@router.callback_query(lambda c: c.data.startswith("transparency_"))
async def handle_transparency(callback: types.CallbackQuery, state: FSMContext):
    transparency_mapping = {
        "transparency_160": 160,
        "transparency_255": 255
    }
    selected_transparency = transparency_mapping.get(callback.data, 160)
    await state.update_data(transparency=selected_transparency)
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏: {selected_transparency}")
    await generate_image(callback.message, state)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def generate_image(message: Message, state: FSMContext):
    data = await state.get_data()
    qr_link = data.get("qr_link")
    prompt = data.get("prompt")
    style = data.get("style")
    transparency = data.get("transparency", 160)

    if not (qr_link and prompt and style and transparency is not None):
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    temporary_message = await message.answer("‚è≥ –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

    try:
        api = Text2ImageAPI()
        model_id = api.get_model()
        if model_id is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            return

        uuid = api.generate(prompt, model_id, style)
        if uuid is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            return

        images = api.check_generation(uuid)
        if not images:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return

        background_img = api.decode_image(images[0])
        qr_code_img = generate_qr_code(qr_link)
        final_img = overlay_qr_on_image(background_img, qr_code_img, alpha=transparency)

        file_path = f"final_result_{message.from_user.id}.png"
        final_img.save(file_path)

        user_history.save_request(message.from_user.id, data)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {data}")

        await temporary_message.delete()
        await message.answer_photo(types.FSInputFile(file_path), caption="‚úÖ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
        await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=continue_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
@router.callback_query(lambda c: c.data == "continue_yes")
async def continue_process(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.qr_link)
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è QR-–∫–æ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
@router.callback_query(lambda c: c.data == "continue_no")
async def stop_process(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
